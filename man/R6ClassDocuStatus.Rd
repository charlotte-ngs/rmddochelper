% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rmddochelper_table_r6class.R
\docType{class}
\name{R6ClassDocuStatus}
\alias{R6ClassDocuStatus}
\title{R6 Class Representing Document Status Objects}
\format{\code{\link{R6Class}} object.}
\usage{
R6ClassDocuStatus$new()
}
\value{
Object of \code{\link{R6Class}} with methods for managing the status of a document.
}
\description{
\code{R6ClassDocuStatus} objects can be used to represent the status
of a given document. A core requirement is that the different status
records should be persistent across different compilation runs. That
makes it necessary to store the intermediate states of an \code{R6ClassDocuStatus}
object in a file. The requirement of a persistent document status history
is implemented in private methods. These method create a small history
management system that can read the status history from a history file and
that is able to write the updated document status to a history
file. The only public method is the one that creates the markdown table in
a document. Before that table is created the private history management functions
are called and the complete status information of the document is collected
from the history file and from the current document status.
}
\section{Fields}{

\describe{
\item{\code{version}}{current version of the document}

\item{\code{author}}{author of the change leading to the current status of the document}

\item{\code{date}}{date of the current change}

\item{\code{status}}{description of document status}

\item{\code{project}}{project this document belongs to}

\item{\code{status_colnames}}{vector of column names shown in the document table}

\item{\code{status_history}}{dataframe with the document history read from the history file}

\item{\code{history_file}}{name of the file containing the document history}
}}
\section{Public Methods}{

\describe{
  \item{\code{new()}}{This method instantiates an object of class R6ClassDocuStatus}
  \item{\code{initialize()}}{Initialization of field called after creating the instance}
  \item{\code{include_doc_stat(psTitle = "Document Status", psFormat = "tab")}}
             {In case a document status history file is found, the document status
              history is read from the history file and is assigend to a dataframe.
              The current status is added to the status history and is written back
              to the status history file. Then the document status section is written
              as a markdown table to the document from where the method is called. This
              is done using the function knitr::kable().}
}
}

\section{Private Methods}{

\describe{
  \item{\code{writeStatusToFile(psFileName = NULL)}}{Writes current status and history
              to a tab-separated file. Tab-separated format is chosen, because TAB-characters
              are less likely to occur in any of the table fields. If argument
              psFileName is not null the name of the output file is set to psFileName,
              otherwise the value in field history_file is used. File encoding is set
              to "UTF-8" in order to preserve German Umlauts}
  \item{\code{readStatusFromFile(psFileName = NULL)}}{Document status history is read
              from the history file. The name of the
              history file is either taken from the method argument psFileName or from
              the object field history_file.}
  \item{\code{readCsv2StatusFromFile(psFileName = NULL)}}{Reading method for old csv2
              formatted status history files. This is mainly used for converting history
              files from old csv2 format to new tab-separated format.}
  \item{\code{knitr_kable}}{Add current document status info to document history and
              convert it to a dataframe. Then use \code{knitr::kable} to convert the
              dataframe into a markdown-table}
}
}
\examples{
r6objDocuStat <- R6ClassDocuStatus$new()
r6objDocuStat$setProject(psProject = "DEXSeq")
r6objDocuStat$setVersion(psVersion = "0.0.900")
r6objDocuStat$setDate(psDate = "31.03.2016")
r6objDocuStat$setAuthor(psAuthor = "pvr")
r6objDocuStat$setStatus(psStatus = "Init")
\dontrun{
r6objDocuStat$writeStatusToFile()
r6objDocuStat$knitr_kable()
}
}
\keyword{datasets}

